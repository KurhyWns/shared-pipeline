---
name: Secrets Detection
on:
  workflow_call:
    inputs:
      scan-paths:
        description: 'Comma-separated paths to scan'
        required: false
        default: '.'
        type: string
      fail-on-secrets:
        description: 'Fail workflow if secrets are found'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write

jobs:
  trufflehog:
    name: TruffleHog Secrets Detection
    runs-on: ${{ github.event.inputs.runner || 'self-hosted' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install and Run TruffleHog OSS
        run: |
          TRUFFLEHOG_VERSION=$(curl -s https://api.github.com/repos/trufflesecurity/trufflehog/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          curl -sL https://github.com/trufflesecurity/trufflehog/releases/download/${TRUFFLEHOG_VERSION}/trufflehog_${TRUFFLEHOG_VERSION:1}_linux_amd64.tar.gz | tar -xz
          chmod +x trufflehog
          
          BASE_COMMIT=${{ github.event.before || 'HEAD~1' }}
          if [ "$BASE_COMMIT" == "0000000000000000000000000000000000000000" ] || [ -z "$BASE_COMMIT" ]; then
            ./trufflehog git file://. \
              --fail \
              --no-update \
              --json \
              --debug \
              --only-verified || trufflehog_exit=$?
          else
            ./trufflehog git file://. \
              --since-commit "$BASE_COMMIT" \
              --fail \
              --no-update \
              --json \
              --debug \
              --only-verified || trufflehog_exit=$?
          fi
          if [ "${trufflehog_exit:-0}" -ne 0 ]; then
            echo "TruffleHog found secrets"
            exit 1
          fi

      - name: TruffleHog Summary
        run: |
          echo "## TruffleHog Secrets Detection" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Paths: ${{ inputs.scan-paths }}" >> \
            $GITHUB_STEP_SUMMARY
          echo "### Tool: TruffleHog OSS (git history)" >> \
            $GITHUB_STEP_SUMMARY

  gitleaks:
    name: GitLeaks Secrets Detection
    runs-on: ${{ github.event.inputs.runner || 'self-hosted' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install and Run GitLeaks
        run: |
          GITLEAKS_TAG=$(curl -s https://api.github.com/repos/zricethezav/gitleaks/releases/latest | grep '"tag_name":' | head -1 | sed 's/.*"tag_name": "\(.*\)".*/\1/')
          VERSION_NUMBER=$(echo $GITLEAKS_TAG | sed 's/^v//')
          echo "Downloading GitLeaks ${GITLEAKS_TAG} (version ${VERSION_NUMBER})"
          curl -sL https://github.com/zricethezav/gitleaks/releases/download/${GITLEAKS_TAG}/gitleaks_${VERSION_NUMBER}_linux_x64.tar.gz -o /tmp/gitleaks.tar.gz
          if [ -f /tmp/gitleaks.tar.gz ] && [ -s /tmp/gitleaks.tar.gz ]; then
            tar -xzf /tmp/gitleaks.tar.gz
            chmod +x gitleaks
            rm /tmp/gitleaks.tar.gz
          else
            echo "Failed to download GitLeaks"
            exit 1
          fi
          
          ./gitleaks detect --redact -v --exit-code=1 --log-level=debug || gitleaks_exit=$?
          if [ "${gitleaks_exit:-0}" -eq 1 ]; then
            echo "GitLeaks found secrets"
            exit 1
          fi

      - name: GitLeaks Summary
        run: |
          echo "## GitLeaks Secrets Detection" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Paths: ${{ inputs.scan-paths }}" >> \
            $GITHUB_STEP_SUMMARY
          echo "### Tool: GitLeaks (git history)" >> \
            $GITHUB_STEP_SUMMARY
