---
name: Secrets Detection
on:
  workflow_call:
    inputs:
      scan-paths:
        description: 'Comma-separated paths to scan'
        required: false
        default: '.'
        type: string
      fail-on-secrets:
        description: 'Fail workflow if secrets are found'
        required: false
        default: true
        type: boolean

permissions:
  contents: read
  security-events: write

jobs:
  trufflehog:
    name: TruffleHog Secrets Detection
    runs-on: ${{ github.event.inputs.runner || 'self-hosted' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install and Run TruffleHog OSS
        run: |
          TRUFFLEHOG_VERSION=$(curl -s https://api.github.com/repos/trufflesecurity/trufflehog/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
          curl -sL https://github.com/trufflesecurity/trufflehog/releases/download/${TRUFFLEHOG_VERSION}/trufflehog_${TRUFFLEHOG_VERSION:1}_linux_amd64.tar.gz | tar -xz
          chmod +x trufflehog
          
          BASE_COMMIT=${{ github.event.before || 'HEAD~1' }}
          if [ "$BASE_COMMIT" == "0000000000000000000000000000000000000000" ] || [ -z "$BASE_COMMIT" ]; then
            ./trufflehog git file://. \
              --fail \
              --no-update \
              --json \
              --debug \
              --only-verified || trufflehog_exit=$?
          else
            ./trufflehog git file://. \
              --since-commit "$BASE_COMMIT" \
              --fail \
              --no-update \
              --json \
              --debug \
              --only-verified || trufflehog_exit=$?
          fi
          if [ "${trufflehog_exit:-0}" -ne 0 ]; then
            echo "TruffleHog found secrets"
            exit 1
          fi

      - name: TruffleHog Summary
        run: |
          echo "## TruffleHog Secrets Detection" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Paths: ${{ inputs.scan-paths }}" >> \
            $GITHUB_STEP_SUMMARY
          echo "### Tool: TruffleHog OSS (git history)" >> \
            $GITHUB_STEP_SUMMARY

  gitleaks:
    name: GitLeaks Secrets Detection
    runs-on: ${{ github.event.inputs.runner || 'self-hosted' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install and Run GitLeaks
        run: |
          # Get the latest release tag - try multiple methods
          API_RESPONSE=$(curl -s https://api.github.com/repos/zricethezav/gitleaks/releases/latest)
          
          if command -v jq &> /dev/null; then
            GITLEAKS_TAG=$(echo "$API_RESPONSE" | jq -r '.tag_name')
          else
            # Use a more robust sed pattern
            GITLEAKS_TAG=$(echo "$API_RESPONSE" | sed -n 's/.*"tag_name"[[:space:]]*:[[:space:]]*"\(v[0-9.]*\)".*/\1/p' | head -1)
          fi
          
          # Fallback: try direct grep if above failed
          if [ -z "$GITLEAKS_TAG" ] || [ "$GITLEAKS_TAG" = "null" ]; then
            GITLEAKS_TAG=$(echo "$API_RESPONSE" | grep '"tag_name"' | sed 's/.*tag_name":"\([^"]*\)".*/\1/' | head -1)
          fi
          
          if [ -z "$GITLEAKS_TAG" ] || [ "$GITLEAKS_TAG" = "null" ]; then
            echo "Failed to parse GitLeaks version. API response:"
            echo "$API_RESPONSE" | head -20
            exit 1
          fi
          
          VERSION_NUMBER=$(echo "$GITLEAKS_TAG" | sed 's/^v//')
          echo "Downloading GitLeaks ${GITLEAKS_TAG} (version ${VERSION_NUMBER})"
          
          DOWNLOAD_URL="https://github.com/zricethezav/gitleaks/releases/download/${GITLEAKS_TAG}/gitleaks_${VERSION_NUMBER}_linux_x64.tar.gz"
          echo "Download URL: $DOWNLOAD_URL"
          
          HTTP_CODE=$(curl -sL -o /tmp/gitleaks.tar.gz -w "%{http_code}" "$DOWNLOAD_URL")
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Failed to download GitLeaks (HTTP $HTTP_CODE)"
            if [ -f /tmp/gitleaks.tar.gz ]; then
              echo "Response content:"
              cat /tmp/gitleaks.tar.gz
            fi
            exit 1
          fi
          
          if [ ! -s /tmp/gitleaks.tar.gz ]; then
            echo "Downloaded file is empty"
            exit 1
          fi
          
          tar -xzf /tmp/gitleaks.tar.gz || { echo "Failed to extract tarball"; exit 1; }
          chmod +x gitleaks
          rm /tmp/gitleaks.tar.gz
          
          ./gitleaks detect --redact -v --exit-code=1 --log-level=debug || gitleaks_exit=$?
          if [ "${gitleaks_exit:-0}" -eq 1 ]; then
            echo "GitLeaks found secrets"
            exit 1
          fi

      - name: GitLeaks Summary
        run: |
          echo "## GitLeaks Secrets Detection" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Paths: ${{ inputs.scan-paths }}" >> \
            $GITHUB_STEP_SUMMARY
          echo "### Tool: GitLeaks (git history)" >> \
            $GITHUB_STEP_SUMMARY
